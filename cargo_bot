import logging
import random
import string
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ContextTypes, ConversationHandler, CallbackQueryHandler)

# Константы этапов
NAME, SURNAME, COUNTRY_SELECT, PHONE_PART, WHATSAPP = range(5)

# Логирование
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Проверка на дубликат
def is_duplicate(name, surname, whatsapp):
    try:
        df = pd.read_excel("clients.xlsx")
        existing = df[
            (df["Имя"] == name) &
            (df["Фамилия"] == surname) &
            (df["WhatsApp"] == whatsapp)
        ]
        return not existing.empty
    except FileNotFoundError:
        return False

# Генерация уникального кода
def generate_code():
    return 'CL' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# Сохранение в Excel
def save_to_excel(data):
    try:
        df = pd.read_excel("clients.xlsx")
    except FileNotFoundError:
        df = pd.DataFrame(columns=["Имя", "Фамилия", "Телефон", "WhatsApp", "Клиентский код"])
    df.loc[len(df)] = data
    df.to_excel("clients.xlsx", index=False)

# Начало
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Добро пожаловать! Введите ваше имя:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["Имя"] = update.message.text
    await update.message.reply_text("Введите вашу фамилию:")
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["Фамилия"] = update.message.text
    keyboard = [[
        InlineKeyboardButton("Кыргызстан", callback_data="996"),
        InlineKeyboardButton("Казахстан", callback_data="7"),
    ], [
        InlineKeyboardButton("Россия", callback_data="8"),
        InlineKeyboardButton("Таджикистан", callback_data="992"),
        InlineKeyboardButton("Узбекистан", callback_data="998"),
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Выберите страну:", reply_markup=reply_markup)
    return COUNTRY_SELECT

async def select_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["Код страны"] = query.data
    await query.edit_message_text("Введите оставшуюся часть номера телефона:")
    return PHONE_PART

async def get_phone_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    local_number = update.message.text
    full_number = f"+{context.user_data['Код страны']}{local_number}"
    context.user_data["Телефон"] = full_number
    await update.message.reply_text("Введите ваш WhatsApp номер (тот же или другой):")
    return WHATSAPP

async def get_whatsapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    whatsapp_number = update.message.text
    context.user_data["WhatsApp"] = whatsapp_number

    if is_duplicate(context.user_data["Имя"], context.user_data["Фамилия"], whatsapp_number):
        await update.message.reply_text("Такой пользователь уже зарегистрирован.")
        return ConversationHandler.END

    code = generate_code()
    context.user_data["Клиентский код"] = code

    new_row = [
        context.user_data["Имя"],
        context.user_data["Фамилия"],
        context.user_data["Телефон"],
        context.user_data["WhatsApp"],
        context.user_data["Клиентский код"]
    ]

    save_to_excel(new_row)

    await update.message.reply_text(
        f"✅ Регистрация завершена!\n"
        f"Имя: {new_row[0]}\n"
        f"Фамилия: {new_row[1]}\n"
        f"Телефон: {new_row[2]}\n"
        f"WhatsApp: {new_row[3]}\n"
        f"Клиентский код: {new_row[4]}"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Регистрация отменена. Напишите /start, чтобы начать заново.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7627624803:AAFW8wKYxdvS7e_f7QlFpSHurrK0PwT-gAQ").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            COUNTRY_SELECT: [CallbackQueryHandler(select_country)],
            PHONE_PART: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone_part)],
            WHATSAPP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_whatsapp)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
